from flask import render_template, url_for, flash, redirect
from app import db
from app.vulnerability import bp
from app.vulnerability.models import Vulnerability
from app.vulnerability.add import VulnerabilityForm
from app.vulnerability.utils import scrape_vulnerability


@bp.route('/vuln/add', methods=['GET', 'POST'])
def vulnerability_add():
    form = VulnerabilityForm()
    if form.validate_on_submit():
        scraped_data = scrape_vulnerability(form.cve.data)
        vulnerability = Vulnerability(
            cve=form.cve.data,
            cvss=scraped_data['cvss'],
            description=scraped_data['description'],
            # references=scraped_data['references']
        )
        db.session.add(vulnerability)
        db.session.commit()
        flash('New vulnerability({}) has been added.'.format(
            form.cve.data), 'success')
        return redirect(url_for('main.index'))

    return render_template('vulnerability/add.html', form=form)


@bp.route('/vuln/list')
def vulnerability_list():
    vulnerabilities = Vulnerability.query.all()
    return render_template('vulnerability/list.html', vulnerabilities=vulnerabilities)


@bp.route('/vuln/edit/<string:cve>', methods=['GET', 'POST'])
def vulnerability_edit(cve):
    vulnerability = Vulnerability.query.get(cve)
    scraped_data = scrape_vulnerability(cve)
    vulnerability.cvss = scraped_data['cvss']
    vulnerability.description = scraped_data['description']
    db.session.commit()
    flash('Vulnerability({}) has been updated.'.format(cve), 'success')
    return redirect(url_for('vulnerability.vulnerability_list'))


@bp.route('/vuln/delete/<string:cve>', methods=['GET'])
def vulnerability_delete(cve):
    vulnerability = Vulnerability.query.get(cve)
    if vulnerability is None:
        flash('Vulnerability({}) does not exist.'.format(cve), 'error')
        return redirect(url_for('vulnerability.vulnerability_list'))

    db.session.delete(vulnerability)
    db.session.commit()
    flash('Vulnerability({}) has been deleted.'.format(cve), 'success')
    return redirect(url_for('vulnerability.vulnerability_list'))


@bp.route('/vuln/detail/<string:cve>', methods=['GET'])
def vulnerability_detail(cve):
    vulnerability = Vulnerability.query.get(cve)

    scraped_data = scrape_vulnerability(cve)
    vulnerability.references = scraped_data['references']

    return render_template('vulnerability/detail.html', vulnerability=vulnerability)
